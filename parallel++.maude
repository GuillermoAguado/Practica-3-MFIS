load PARALLEL

---- PARALLEL++: A simple parallel++ language and its rewriting logic semantics.

---- Memory model with locations named by Qids holding Ints.

fmod MEMORY++ is
    including MEMORY .
    including EXPRESSION .
    protecting BOOL .
    pr QID * (sort Qid to BQid, op qid to bqid) .
    sort BExpression .
    subsorts BQid Bool < BExpression .

    op [_,_] : BQid Bool -> Memory .
    op _in_ : BQid Memory -> Bool? . ---- cell allocated for Q?
    
    vars Q Q' : Qid .
    vars BQ BQ' : BQid . 
    var M : Memory . 
    var B : Bool .

    sorts Array ArrayContent .
    subsort Int Array < ArrayContent .
    op arrayNil : -> ArrayContent .
    op _;_ : ArrayContent ArrayContent -> ArrayContent [ctor assoc id: arrayNil] . 
    op [_,_] : Qid ArrayContent -> Memory .
    var C : ArrayContent .
    eq Q in [Q, C] M = true .

    sort BArray BArrayContent .
    subsort Bool BArray < BArrayContent .
    op barrayNil : -> BArrayContent .
    op _;_ : BArrayContent BArrayContent -> BArrayContent [ctor assoc id: barrayNil] . 
    op [_,_] : BQid BArrayContent -> Memory .
    var BC : BArrayContent .
    eq BQ in [BQ, BC] M = true .


endfm

---- Test comparing the contents of a named memory location to an integer. 
---- By default, value of non-allocated Qid++ is 0.

fmod TESTS++ is
    inc TESTS .
    inc MEMORY++ .
    op _=_ : Qid Qid -> Test . --- Para expresiones
    op _=_ : BQid BQid -> Test . --- Para Bool
    op _>’_ : Qid Qid -> Test . --- Para expresiones
    op _!=_ : Qid Qid -> Test .
    op _!=_ : BQid BQid -> Test .
    

    var Q Q' : Qid . 
    var BQ BQ' : BQid .
    var M : Memory .
    var N N' : Int . 
    var B B' : Bool . 
    vars T T' : Test .

    eq eval(Q = Q', [Q, N] [Q', N'] M) = N == N' .
   ceq eval(Q = Q', [Q, N] M) = N == 0 if Q in M =/= true .
   ceq eval(Q = Q', M) = true if (Q in M =/= true) and (Q' in M =/= true) .

    eq eval(Q >’ Q', [Q, N] [Q', N'] M) = N > N' .
   ceq eval(Q >’ Q', [Q, N] M) = N > 0 if Q' in M =/= true .

    eq eval(BQ = BQ', [BQ, B] [BQ', B'] M) = B == B' .
   ceq eval(BQ = BQ', [BQ, B] M) = B == false if BQ' in M =/= true .
   ceq eval(BQ = BQ', M) = true if (BQ in M =/= true) and (BQ' in M =/= true) .

    eq eval(Q != Q', [Q, N] [Q', N'] M) = N =/= N' .
   ceq eval(Q != Q', [Q, N] M) = N =/= 0 if Q in M =/= true .
   ceq eval(Q != Q', M) = false if (Q in M =/= true) and (Q' in M =/= true) .

    eq eval(BQ != BQ', [BQ, B] [BQ', B'] M) = B =/= B' .
   ceq eval(BQ != BQ', [BQ, B] M) = B == true if BQ' in M =/= true .
   ceq eval(BQ != BQ', M) = false if (BQ in M =/= true) and (BQ' in M =/= true) .

endfm

---- Syntax for arithmetic expressions, and their evaluation semantics.
---- To avoid evaluation of expressions by themselves, the operators
---- + and * are specified as constructors with syntax +’ and *’ 
fmod EXPRESSION++ is
    inc EXPRESSION . 
    inc MEMORY++ .
    inc SEQUENTIAL . 
    op eval : BExpression Memory -> Bool .

    var Q : Qid .
    var BQ : BQid .
    var B : Bool .
    var I : Int .
    var C : ArrayContent .
    var BC : BArrayContent .
    var N : Nat .
    var M : Memory .

    eq eval(B, M) = B .
   ceq eval(BQ, M) = false if BQ in M =/= true .
    eq eval(BQ, [BQ, B] M) = B . 

    subsort Array < Expression .
    op _[_] : Qid Expression -> Array .
    eq eval(Q[0], [Q,(I ; C)] M) = I .
    eq eval(Q[s N], [Q,(I ; C)] M) = eval(Q[N], [Q, C] M) .

    subsort BArray < BExpression .
    op _[_] : BQid Expression -> BArray .
    eq eval(BQ[0], [BQ,(B ; BC)] M) = B .
    eq eval(BQ[s N], [BQ,(B ; BC)] M) = eval(BQ[N], [BQ, BC] M) .

    --- var Q : Qid . 
    --- var M : Memory . 
    --- vars N N’ : Int . 
    --- vars E E’ : Expression .
endfm


---- Syntax for a trival sequential programming language. 
---- We allow abstracting out program fragments as elements of sorts LoopingUserStatement and UserStatement. 
---- LoopingUserStatements abstract out potentially nonterminating program fragments. 
---- UserStatements which are not LoopingUserStatements abstract out terminating program fragments.

fmod SEQUENTIAL++ is
    inc SEQUENTIAL .
    inc TESTS++ .
    inc EXPRESSION++ .
    
    op _:=_ : Qid Expression -> Program .
    op _:=_ : BQid BExpression -> Program .
    op if_then_else_fi : Test Program Program -> Program .
    op repeat_until_li : Program Test -> Program .
    
endfm

mod PARALLEL++ is
    inc PARALLEL .
    inc SEQUENTIAL++ .
    
    vars P1 P2 RP : Program . ---RP es el resto del programa 
    var  S : Soup .
    var  I : Pid . 
    var  M : Memory .
    vars N1 N2 N3 : Int .
    vars B1 B2 : Bool .
    var  Q : Qid . 
    var BQ : BQid .
    var  T : Test . 
    var  E : Expression .
    var BE : BExpression .
    var  C : ArrayContent .
    var BC : BArrayContent .

    ---Operaciones necesarias para modificar array
    op modificarArray : ArrayContent Expression Expression -> ArrayContent .
    op modificarBArray : BArrayContent Expression BExpression -> BArrayContent .

    eq modificarArray(N1 ; C, 0, E) = E ; C .
    eq modificarArray(N1 ; C, s N2, E) = N1 ; modificarArray(C, N2, E) .

    eq modificarBArray(B1 ; BC, 0, BE) = BE ; BC .
    eq modificarBArray(B1 ; BC, s N2, BE) = B1 ; modificarBArray(BC, N2, BE) .

    rl {[I, if T then P1 else P2 fi ; RP] | S, M} => {[I, if eval(T,M) then P1 else P2 fi ; RP] | S, M} . --- if then else

    rl {[I, repeat P1 until T li ; RP] | S, M} => {[I, (P1 ; if T then skip ; RP else P1 ; repeat P1 until T li fi ; RP)] | S, M} . --- repeat until

    ---Asignacion Array Normal
    rl {[I, (Q [N1] := E) ; RP] | S, [Q, C] M} => {[I, RP] | S, [Q, modificarArray(C, N1, eval(E, [Q, C] M))] M} .

    ---Asignacion Array Booleanos
    rl {[I, (BQ [N1] := BE) ; RP] | S, [BQ, BC] M} => {[I, RP] | S, [BQ, modificarBArray(BC, N1, eval(BE, [BQ, BC] M))] M} .

endm

eof