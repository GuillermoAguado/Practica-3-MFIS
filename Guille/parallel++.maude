load parallel.maude
---- PARALLEL++: A simple parallel++ language and its rewriting logic semantics.

---- Memory model with locations named by Qids holdings Ints and ArrayContents & BQids holding Bools and BArrayContents.

fmod MEMORY++ is
    inc MEMORY .
    protecting INT .
    protecting BOOL .
    protecting QID * (sort Qid to BQid, op qid to bqid) .
    
    --- Arrays
    sort ArrayContent .
    subsort Int < ArrayContent .
    op arrayEmpty : -> ArrayContent .
    op _;_ : ArrayContent ArrayContent -> ArrayContent [assoc id: arrayEmpty] .
    op [_,_] : Qid ArrayContent -> Memory .
    op _in_ : Qid Memory -> Bool? . ---- cell allocated for Q?
    var Q : Qid .
    var M : Memory .
    var AC : ArrayContent .
    eq Q in [Q, AC] M = true . ---- incomplete, only positive cases
    
    ---Booleanos
    op [_,_] : BQid Bool -> Memory .
    op _in_ : BQid Memory -> Bool? . ---- cell allocated for Q?
    var BQ : BQid .
    var B : Bool .
    eq BQ in [BQ, B] M = true . ---- incomplete, only positive cases

    ---Arrays Booleanos
    sort BArrayContent .
    subsort Bool < BArrayContent .
    op barrayEmpty : -> BArrayContent .
    op _;_ : BArrayContent BArrayContent -> BArrayContent [assoc id: barrayEmpty] .
    op [_,_] : BQid BArrayContent -> Memory .
    op _in_ : BQid Memory -> Bool? . ---- cell allocated for Q?
    var BAC : BArrayContent .
    eq BQ in [BQ, BAC] M = true .
endfm

--- Primero definimos las expresiones porque debemos usarlas en test
---- Syntax for arithmetic expressions, and their evaluation semantics.
---- To avoid evaluation of expressions by themselves, the operators
---- + and * are specified as constructors with syntax +’ and *’ 
fmod EXPRESSION++ is
    inc MEMORY++ .
    inc EXPRESSION . 
    sort BExpression .
    subsorts BQid Bool < BExpression .

    op eval : BExpression Memory -> Bool .
    var BQ : BQid . 
    var M : Memory . 
    vars B1 B2 : Bool . 
    vars BE1 BE2 : BExpression .
    eq eval(B1, M) = B1 .
    eq eval(BQ, [BQ, B1] M) = B1 . 
   ceq eval(BQ,M) = false if BQ in M =/= true .

    ---Array
    sort Array .
    subsort Array < Expression .
    op _[_] : Qid Expression -> Array .
    var Q : Qid .
    vars N1 N2 : Int .
    var AC : ArrayContent .
    eq eval(Q[0], [Q, (N1 ; AC)] M) = N1 .
    eq eval(Q[s N1], [Q, (N2 ; AC)] M) = eval(Q[N1], [Q, AC] M) .

    ---Array Bool
    sort BArray .
    subsort BArray < BExpression .
    op _[_] : BQid Expression -> BArray .
    var BAC : BArrayContent .
    eq eval(BQ[0], [BQ, (B1 ; BAC)] M) = B1 .
    eq eval(BQ[s N1], [BQ, (B1 ; BAC)] M) = eval(BQ[N1], [BQ, BAC] M) .

endfm

---- Test comparing the contents of a named memory location to an integer. 
---- By default, value of non-allocated Qid is 0.

fmod TESTS++ is
    inc EXPRESSION++ .
    inc TESTS .

    op _=_ : Expression Expression -> Test .
    op _>’_ : Expression Expression -> Test .
    op _!=_ : Expression Expression -> Test .
    op _=_ : BExpression BExpression -> Test .
    op _!=_ : BExpression BExpression -> Test .

    var M : Memory .
    vars E1 E2 E3 : Expression .
    vars BE1 BE2 : BExpression . 
    vars T T’ : Test .
    eq eval(E1 = E2, M) = eval(E1, M) == eval(E2, M) .
    eq eval(E1 >’ E2, M) = eval(E1, M) > eval(E2, M) .
    eq eval(E1 != E2, M) = eval(E1, M) =/= eval(E2, M) .

    eq eval(BE1 = BE2, M) = eval(BE1, M) == eval(BE2, M) .
    eq eval(BE1 != BE2, M) = eval(BE1, M) =/= eval(BE2, M) .
endfm

---- Syntax for a trival sequential programming language. 
---- We allow abstracting out program fragments as elements of sorts LoopingUserStatement and UserStatement. 
---- LoopingUserStatements abstract out potentially nonterminating program fragments. 
---- UserStatements which are not LoopingUserStatements abstract out terminating program fragments.

fmod SEQUENTIAL++ is
    inc TESTS++ .
    inc EXPRESSION++ .
    inc SEQUENTIAL .
    
    ---op _:=_ : BQid BExpression -> Program .
    op _:=_ : Array Expression -> Program .
    op _:=_ : BArray BExpression -> Program .
    op if_then_else_fi : Test Program Program -> Program .
    op repeat_until_li : Program Test -> Program .
    
endfm

mod PARALLEL++ is
    inc PARALLEL .
    inc SEQUENTIAL++ .

    vars P1 P2 R : Program . 
    var  S : Soup .
    var  U : UserStatement . 
    var  L : LoopingUserStatement .
    vars I J : Pid . 
    var  M : Memory .
    var  Q : Qid .
    var BQ : BQid . 
    vars N X : Int .
    var  T : Test . 
    var  E : Expression .
    var BE : BExpression .
    vars N1 N2 N3 : Int .
    var AC : ArrayContent .
    vars B1 B2 : Bool .
    var BAC : BArrayContent .

    op modificarArray : ArrayContent Expression Expression -> ArrayContent .
    eq modificarArray(N1 ; AC, 0, N2) = N2 ; AC .
    eq modificarArray(N1 ; AC, s N3, N2) = N1 ; modificarArray(AC, N3, N2) .

    op modificarBArray : BArrayContent Expression BExpression -> BArrayContent .
    eq modificarBArray(B1 ; BAC, 0, B2) = B2 ; BAC .
    eq modificarBArray(B1 ; BAC, s N3, B2) = B1 ; modificarBArray(BAC, N3, B2) .

    ---if then else fi
    rl {[I, if T then P1 else P2 fi ; R] | S, M} => 
      {[I, if eval(T,M) then P1 else P2 fi ; R] | S, M} .
    ---repeat until
    rl {[I, repeat P1 until T li ; R] | S, M}
      => {[I, P1 ; if eval(T, M) 
                   then skip
                   else (repeat P1 until T li)
                   fi ; R] | S, M} .
    ---Asignacion Arrays
    crl {[I, (Q := AC) ; R] | S, M}
        => {[I, R] | S, [Q, AC] M}
        if Q in M =/= true .
    ---Asignacion Posicion Arrays
    rl {[I, (Q[N1] := E) ; R] | S, [Q, AC] M}
        => {[I, R] | S, [Q, modificarArray(AC, N1, eval(E, [Q, AC] M))] M} .
    ---Asignacion Arrays de Bools
    crl {[I, (BQ := BAC) ; R] | S, M}
        => {[I, R] | S, [BQ, BAC] M}
        if BQ in M =/= true .
    ---Asignacion Posicion Arrays de Bool
    rl {[I, (BQ[N1] := BE) ; R] | S, [BQ, BAC] M}
        => {[I, R] | S, [BQ, modificarBArray(BAC, N1, eval(BE, [BQ, BAC] M))] M} .
    
endm

eof

Maude> load dekker++
==========================================
search in DEKKER++ : initial =>* {S | [1,crit1 ; R] | [2,crit2 ; P],M} .

No solution.
states: 152  rewrites: 1383 in 0ms cpu (2ms real) (~ rewrites/second)
==========================================
search in DEKKER++ : initial =>! MS:MachineState .

No solution.
states: 152  rewrites: 1383 in 0ms cpu (2ms real) (~ rewrites/second)